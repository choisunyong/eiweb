package skt.eiweb.file;

import java.util.HashMap;
// import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;
import skt.eiweb.base.model.EIResponse;
import skt.eiweb.file.model.File;

/**
 * ================================================================================
 * @Project      : eiweb
 * @Package      : skt.eiweb.file
 * @Filename     : FileController.java
 * 
 * All rights reserved. No part of this work may be reproduced, stored in a
 * retrieval system, or transmitted by any means without prior written
 * permission of SKT corp.
 * 
 * Copyright(c) 2020 SKT corp. All rights reserved
 * =================================================================================
 *  No     DATE              Description
 * =================================================================================
 *  1.0	   2020. 9. 29.      Initial Coding & Update
 * =================================================================================
 */
@Slf4j
@CrossOrigin(origins = "*", allowedHeaders = "*")
@Controller
@RequestMapping("/file")
@SuppressWarnings({
	"rawtypes", "unchecked"
})
public class FileController {

	@Autowired
	FileService fileService;

	/**
	 * 파일 업로드
	 */
	@PostMapping("/upload")
	@Secured({
		"ROLE_ADMIN", "ROLE_MODELER"
	})
	public ResponseEntity<EIResponse> upload(@RequestParam("file") MultipartFile file) throws Exception {
		EIResponse res = new EIResponse();

		try {
			File fileVo = fileService.save(file);
			res.setResult(EIResponse.SUCCESS);
			HashMap data = new HashMap();
			data.put("file", fileVo);
			res.setData(data);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return ResponseEntity.status(HttpStatus.OK).body(res);
	}

	/**
	 * 파일 다운로드
	 */
	@GetMapping("/download/{fileCode:.+}")
	@Secured({
		"ROLE_ADMIN", "ROLE_MODELER"
	})
	public ResponseEntity<Resource> getFile(@PathVariable String fileCode) throws Exception {
		HashMap m = fileService.load(fileCode);
		Resource file = (Resource) m.get("resource");
		File fileVo = (File) m.get("file");
		ResponseEntity<Resource> res = null;

		try {
			res = ResponseEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + fileVo.getFileName() + "\"").body(file);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw e;
		}

		return res;
	}

	/**
	 * 파일 삭제
	 */
	@PostMapping("/delete")
	@Secured({
		"ROLE_ADMIN", "ROLE_MODELER"
	})
	public ResponseEntity<EIResponse> delete(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();

		try {
			String fileCodes = parm.get("fileCodes");
			String[] files = fileCodes.split(",");
			for (int i = 0; i < files.length; i++) {
				fileService.delete(files[i]);
			}
			res.setResult(EIResponse.SUCCESS);
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return ResponseEntity.status(HttpStatus.OK).body(res);
	}

}
