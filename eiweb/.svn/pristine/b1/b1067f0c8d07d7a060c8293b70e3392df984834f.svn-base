CREATE TABLE IF NOT EXISTS USER (
 SIGNUP_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '가입일'
 ,USER_ID VARCHAR(20) NOT NULL PRIMARY KEY COMMENT '유저 아이디'
 ,PASSWORD VARCHAR(100) NOT NULL COMMENT '유저 비밀번호'
 ,USER_NAME VARCHAR(20) NOT NULL COMMENT '유저 이름'
 ,USER_EMAIL VARCHAR(100) NOT NULL COMMENT '유저 이메일'
 ,USER_PERMISSION VARCHAR(20) NOT NULL COMMENT '유저 권한(ADMIN / MODELER)'
 ,ACTIVATE TINYINT(1) NOT NULL COMMENT '활성 여부(유저 로그인 승인/차단 상태 표시)'
);

CREATE TABLE IF NOT EXISTS LOGIN_HISTORY (
 LOGIN_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '로그인 일시'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '유저 아이디', FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID) ON UPDATE CASCADE
 ,SESSION VARCHAR(50) NOT NULL COMMENT '유저 세션(유저가 현재 로그인 상태인지 확인)'
);

CREATE TABLE IF NOT EXISTS MODEL (
 REG_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '등록일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '등록 유저'
 ,MODEL_NAME VARCHAR(50) NOT NULL COMMENT '모델 이름'
 ,MODEL_ID VARCHAR(10) NOT NULL PRIMARY KEY COMMENT '모델 ID'
 ,VERSION VARCHAR(10) NOT NULL COMMENT '모델 버전'
 ,PRIORITY INT(4) NOT NULL COMMENT '실행 우선순위(표현할 때는 상중하로 표현되지만 숫자로는 4096, 1024, 512로 표시)'
 ,CPU_CORES INT(4) COMMENT '사용 CPU CORE수(모델에서 사용하는 CORE 개수)'
 ,MEM FLOAT(7,1) COMMENT '사용 MEMORY양(모델에서 사용하는 MEMORY)'
 ,ELAPSED FLOAT(7,1) COMMENT '모델 테스트 시간(모델 수행 시간)'
 ,BASE_IMAGE VARCHAR(20) NOT NULL COMMENT '기본 사용 이미지(모델 실행 환경 설정(R, PYTHON))'
 ,MODEL_DESC VARCHAR(500) COMMENT '모델 설명(모델에 관한 코멘트)'
 ,LIMIT_RUNTIME INT(4) NOT NULL DEFAULT 0 COMMENT '모델 실행 제한 시간(0 : 무한, 나머지는 제한 시간(분단위))'
 ,EVALUATION_STATUS VARCHAR(10) NOT NULL DEFAULT 'INIT' COMMENT '모델 평가 상태(INIT : 등록, TESTING : 평가중, TESTED: 평가 끝)'
);


CREATE TABLE IF NOT EXISTS MODEL_REG_HISTORY (
 REG_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '등록일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '등록 유저'
 ,MODEL_NAME VARCHAR(50) NOT NULL COMMENT '모델 이름'
 ,MODEL_ID VARCHAR(10) NOT NULL COMMENT '모델 ID'
 ,VERSION VARCHAR(10) NOT NULL COMMENT '모델 버전'
 ,PRIORITY INT(4) NOT NULL COMMENT '실행 우선순위(표현할 때는 상중하로 표현되지만 숫자로는 4096, 1024, 512로 표시)'
 ,CPU_CORES INT(4) COMMENT '사용 CPU CORE수(모델에서 사용하는 CORE 개수)'
 ,MEM FLOAT(7,1) COMMENT '사용 MEMORY양(모델에서 사용하는 MEMORY)'
 ,ELAPSED FLOAT(7,1) COMMENT '모델 테스트 시간(모델 수행 시간)'
 ,BASE_IMAGE VARCHAR(20) NOT NULL COMMENT '기본 사용 이미지(모델 실행 환경 설정(R, PYTHON))'
 ,MODEL_DESC VARCHAR(500) COMMENT '모델 설명(모델에 관한 코멘트)'
 ,LIMIT_RUNTIME INT(4) DEFAULT 0 COMMENT '모델 실행 제한 시간(0 : 무한, 나머지는 제한 시간(분단위))'
 ,EVALUATION_STATUS VARCHAR(10) NOT NULL DEFAULT 'INIT' COMMENT '모델 평가 상태(INIT : 등록, TESTING : 평가중, TESTED: 평가 끝)'
);

CREATE TABLE IF NOT EXISTS SERVICE (
 CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '생성 유저 ID'
 ,SERVICE_ID VARCHAR(20) NOT NULL PRIMARY KEY COMMENT 'SERVICE ID(SERVICE 검색용 ID)'
 ,SERVICE_NAME VARCHAR(50) NOT NULL COMMENT 'SERVICE 이름'
 ,DAG_ID VARCHAR(50) NOT NULL COMMENT 'DAG ID(AIRFLOW에서 DAG_ID를 이용 SERVICE_ID를 검색하기 위함)'
 ,MODEL_ID VARCHAR(50) NOT NULL COMMENT '사용 모델 ID'
 ,VERSION VARCHAR(10) NOT NULL COMMENT '서비스 버전'
 ,RUN_CYCLE VARCHAR(100) COMMENT '실행 주기(언제 실행되는지에 대한 정의)'
 ,SERVICE_GROUP_NAME VARCHAR(50) NOT NULL COMMENT '서비스 그룹 이름(서비스 그룹 이름)'
 ,SERVICE_DESC VARCHAR(500) COMMENT '서비스 설명(서비스 설명)'
);

CREATE TABLE IF NOT EXISTS SERVICE_CRE_HISTORY (
 CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '생성 유저 ID'
 ,SERVICE_ID VARCHAR(20) NOT NULL COMMENT 'SERVICE ID(SERVICE 검색용 ID)'
 ,SERVICE_NAME VARCHAR(50) NOT NULL COMMENT 'SERVICE 이름'
 ,DAG_ID VARCHAR(50) NOT NULL COMMENT 'DAG ID(AIRFLOW에서 DAG_ID를 이용 SERVICE_ID를 검색하기 위함)'
 ,MODEL_ID VARCHAR(50) NOT NULL COMMENT '사용 모델 ID'
 ,VERSION VARCHAR(10) NOT NULL COMMENT '서비스 버전'
 ,RUN_CYCLE VARCHAR(100) COMMENT '실행 주기(언제 실행되는지에 대한 정의)'
 ,SERVICE_GROUP_NAME VARCHAR(50) NOT NULL COMMENT '서비스 그룹 이름(서비스 그룹 이름)'
 ,SERVICE_DESC VARCHAR(500) COMMENT '서비스 설명(서비스 설명)'
);

CREATE TABLE IF NOT EXISTS SERVICE_EXEC_HISTORY (
 EXECUTE_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '실행일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '생성 유저 ID'
 ,SERVICE_ID VARCHAR(20) NOT NULL COMMENT 'SERVICE ID(SERVICE 검색용 ID)'
 ,SERVICE_NAME VARCHAR(50) NOT NULL COMMENT 'SERVICE 이름'
 ,MODEL_ID VARCHAR(50) NOT NULL COMMENT '사용 모델 ID'
 ,VERSION VARCHAR(10) NOT NULL COMMENT '서비스 버전'
 ,RUN_CYCLE VARCHAR(100) COMMENT '실행 주기(언제 실행되는지에 대한 정의)'
 ,SERVICE_GROUP_NAME VARCHAR(50) NOT NULL COMMENT '서비스 그룹 이름(서비스 그룹 이름)'
 ,TRANSACTION_ID VARCHAR(20) NOT NULL COMMENT '트랜잭션 ID(YYYYMMDDHHMMSSSSS (밀리초 단위 문자))'
 ,SERVICE_DESC VARCHAR(500) COMMENT '서비스 설명(서비스 설명)'
 ,SERVICE_STATUS VARCHAR(20) NOT NULL COMMENT '서비스 종료 상태(SUCCESS, WARNING, ERROR, USER_KILLED)'
 ,START_DATE TIMESTAMP NOT NULL COMMENT '서비스 실행 시작 시간(서비스 시작 시간)'
 ,END_DATE TIMESTAMP NOT NULL COMMENT '서비스 종료 시간(서비스 종료 시간)'
);

CREATE TABLE IF NOT EXISTS SERVICE_ERROR_HISTORY (
 OCCURRED_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '에러 발생일'
 ,ID VARCHAR(20) NOT NULL COMMENT 'ID(USER 혹은 시스템 (논의 필요))'
 ,ACTION_ID VARCHAR(20) NOT NULL COMMENT '요청 ID(요청된 JOB의 ID 혹은 이름 기타 ID 부여)'
 ,ERROR_CODE VARCHAR(10) NOT NULL COMMENT '에러코드(에러 코드)'
 ,PARAMS VARCHAR(100) NOT NULL COMMENT '파라미터(요청된 JOB에 부여되었던 파라미터들)'
 ,ERROR_DESC VARCHAR(500) COMMENT '에러 내용(에러 상세 내용)'
);

CREATE TABLE IF NOT EXISTS SERVICE_GROUP (
 CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일'
 ,SERVICE_GROUP_NAME VARCHAR(50) NOT NULL COMMENT '서비스 그룹 이름'
 ,DESCRIPTION VARCHAR(500) COMMENT 'DESCRIPTION'
);

CREATE TABLE IF NOT EXISTS REST_EXEC_HISTORY (
 EXECUTE_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '실행일시'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '실행 유저 ID'
 ,SERVER_NAME VARCHAR(20) COMMENT '서버 이름(SCALE IN/OUT시 서버 이름 그 외에는 공백)'
 ,ACTION VARCHAR(20) NOT NULL COMMENT '실행 내용(START, STOP, STATUS)'
 ,SUCCESS TINYINT(1) NOT NULL DEFAULT FALSE COMMENT '성공 실패 여부(작업 성공 실패)'
 ,ELAPSED_TIME VARCHAR(20) NOT NULL COMMENT '수행 시간(작성 수행에 소요된 시간)'
);

CREATE TABLE IF NOT EXISTS MODEL_FILE (
 REG_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '등록일'
 ,USER_ID VARCHAR(20) NOT NULL COMMENT '등록 유저'
 ,MODEL_ID VARCHAR(10) COMMENT '모델 ID', FOREIGN KEY(MODEL_ID) REFERENCES MODEL(MODEL_ID) ON UPDATE CASCADE
 ,MODEL_VERSION VARCHAR(10) NOT NULL COMMENT '모델 버전'
 ,FILE_CODE VARCHAR(500) NOT NULL COMMENT '파일 코드(모델 첨부 파일은 파일명과 동일)'
 ,FILE_NAME VARCHAR(100) NOT NULL COMMENT '파일 이름'
 ,FILE_SIZE INT(4) NOT NULL COMMENT '파일 사이즈'
 ,FILE_EXT VARCHAR(10) COMMENT '파일 확장자'
);

CREATE TABLE IF NOT EXISTS COMMON_GROUP (
 GROUP_CODE VARCHAR(50) NOT NULL PRIMARY KEY COMMENT '그룹코드'
 ,GROUP_NAME VARCHAR(50) NOT NULL COMMENT '그룹코드명'
 ,USE_YN VARCHAR(1) NOT NULL DEFAULT 'Y' COMMENT '사용유무'
);

CREATE TABLE IF NOT EXISTS COMMON_CODE (
 GROUP_CODE VARCHAR(50) NOT NULL COMMENT '그룹코드(COMMON GROUP의 그룹 코드)', FOREIGN KEY(GROUP_CODE) REFERENCES COMMON_GROUP(GROUP_CODE) ON UPDATE CASCADE
 ,CODE VARCHAR(50) NOT NULL COMMENT '코드'
 ,CODE_NAME VARCHAR(100) NOT NULL COMMENT '코드명'
 ,VALUE VARCHAR(100) COMMENT '코드값'
 ,USE_YN VARCHAR(1) NOT NULL DEFAULT 'Y' COMMENT '사용유무'
 ,SORT INT(3) NOT NULL DEFAULT 1 COMMENT '순서'
);

CREATE TABLE IF NOT EXISTS SEQUENCE(
 ID INT(11) NOT NULL COMMENT '그룹코드'
 ,REMARK VARCHAR(50) COMMENT '비고(구분)(사용하는곳(MODEL))'
);

CREATE TABLE IF NOT EXISTS CPU_HISTORY (
 RECEIVE_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP PRIMARY KEY COMMENT '수집일시(데이터 수집일시)'
 ,INSTANCE VARCHAR(20) NOT NULL PRIMARY KEY COMMENT '서버 INSTANCE(NCP)(INSTANCE)'
 ,SERVER_NAME VARCHAR(20) NOT NULL COMMENT '서버 이름(서버 이름)'
 ,CPU_AVERAGE FLOAT NOT NULL DEFAULT 0 COMMENT 'CPU 평균(CPU 평균)'
 ,CPU_UNIT VARCHAR(20) NOT NULL DEFAULT 'PERCENT' COMMENT 'CPU 단위(CPU 평균값 단위)'

);

CREATE TABLE IF NOT EXISTS CPU_HIST_SUMMARY (
 RECEIVE_DATE VARCHAR(8) NOT NULL PRIMARY KEY COMMENT '수집일시(데이터 수집일시)'
 ,INSTANCE VARCHAR(20) NOT NULL PRIMARY KEY COMMENT '서버 INSTANCE(NCP)(INSTANCE)'
 ,SERVER_NAME VARCHAR(20) NOT NULL COMMENT '서버 이름(서버 이름)'
 ,CPU_AVERAGE FLOAT NOT NULL DEFAULT 0 COMMENT 'CPU 평균(CPU 평균)'
 ,CPU_UNIT VARCHAR(20) NOT NULL DEFAULT 'PERCENT' COMMENT 'CPU 단위(CPU 평균값 단위)'
);

