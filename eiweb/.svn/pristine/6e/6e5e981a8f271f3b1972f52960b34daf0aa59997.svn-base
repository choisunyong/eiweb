import React, {Component} from 'react';
import {ServiceService} from 'service';
import Grid from '@toast-ui/react-grid';
import TuiGrid from 'tui-grid';
import {Pagination, Msg, NameRenderer} from 'comp';
import Validation from 'comp/Validation';
import ServiceReg from 'service/ServiceReg';
import {AdminService} from 'admin';
import ModelPopCont from 'model/ModelPopCont';
import ServiceDetail from 'service/ServiceDetail';

/**
 * 화면명 : 서비스 관리
 * 화면 경로 : 서비스 > 서비스 관리
 * 화면 코드 : MENU00301
 * 참고 : https://nhn.github.io/tui.grid/latest/Grid
 */
class ServiceManager extends Component {
    constructor(props) {
        super(props);
        this.state = {
            gridData:[],
            columns:[],
            bodyHeight:200,
            // selectionRowKey:-1,
            // selectionColumName:'',
            // selectionItem:{},
            pagesPage:1,
            pagesTotalCount:0,
            pagesPerPage:5,
            // showReg:false,
            // showDetail:false,
            modifyServiceInfo:undefined,
            // modifyModelFiles:undefined
            serviceGroupData:[],
            schInfo:undefined
        };
        this.requestData = this.requestData.bind(this);
        this.onResultList = this.onResultList.bind(this);
        this.onClickPageItem = this.onClickPageItem.bind(this);
        this.onClickReg = this.onClickReg.bind(this);
        this.onCloseReg = this.onCloseReg.bind(this);
        // this.onClickGrid = this.onClickGrid.bind(this);
        // this.onDClickGrid = this.onDClickGrid.bind(this);
        // this.onCloseDetail = this.onCloseDetail.bind(this);
        this.onClickModify = this.onClickModify.bind(this);
        this.onClickSch = this.onClickSch.bind(this);
        this.onClickGridNameColumn = this.onClickGridNameColumn.bind(this);
        this.onResultServiceGroupList = this.onResultServiceGroupList.bind(this);
        this.onClickModelPop = this.onClickModelPop.bind(this);
        this.onClickModelSelection = this.onClickModelSelection.bind(this);
        this.onClickSchModelDel = this.onClickSchModelDel.bind(this);
        this.onClickKill = this.onClickKill.bind(this);
    }

    componentDidMount() {
        TuiGrid.setLanguage('ko');
        TuiGrid.applyTheme('clean'); // default, striped, clean
        // console.log( document.getElementsByClassName('content')[0].clientHeight );
        // console.log(">>>>>>>>>>>>>>> is popup : " + this.props.isPopup);
        // this.setState({bodyHeight:document.getElementById('root').clientHeight - 580});
        this.requestData(1);

        // if (this.refs.grid && this.refs.grid.getInstance() && this.refs.grid.getInstance().el)
        //     this.refs.grid.getInstance().el.addEventListener("dblclick",this.onDClickGrid,false);

        // 서비스 그룹
        AdminService.serviceGroupList({},this.onResultServiceGroupList,(err) => Msg.error(err.message));
    }

    componentDidUpdate() { 
        // try {
        //     if (this.refs.grid && this.refs.grid.getInstance() && this.refs.grid.getInstance().el)
        //         this.refs.grid.getInstance().el.addEventListener("dblclick",this.onDClickGrid,false);
        // } catch (err) {
        //     console.log(err);
        // }
    }

    onResultServiceGroupList(res) {
        if (res.result==="ok") {
            this.setState({serviceGroupData:res.list});
        } else if (res.result === "fail"){
            Msg.error(res.message);
        }
    }

    /**
	 * 페이지 클릭 이벤트 핸들러
	 * @param {int} page 
	 */
    onClickPageItem(page) {
        // console.log("onclickpageitem : " + page);
        this.requestData(page);
    }

    requestData(page,schKeyword) {
        const {schServiceGroup, modelId} = this.refs;
        if (page === undefined) page = this.state.pagesPage;
        this.props.main.showLoading();
        const parm = {
            page:page
        };
        // servicegroup
        // console.log(this.refs.schServiceGroup.value);
        if (schServiceGroup.value !== "all") {
            parm.serviceGroupName = schServiceGroup.value;
        }
        // model
        if (modelId.value !== undefined && modelId.value !== null && modelId.value !== "") {
            parm.modelId = modelId.value;
        }

        if (schKeyword !== undefined) {
            // Msg.info("필터전 : " + schKeyword);
            schKeyword = Validation.filterSchKeyword(schKeyword);
            // Msg.info("필터후 : " + schKeyword);
            parm.schKey = schKeyword;
        }
        this.setState({schInfo:parm});
        ServiceService.list(parm,this.onResultList,(err) => Msg.error(err.message));
    }

    onResultList(res) {
        this.props.main.hideLoading();
        // console.log("onresultlist");
        // console.log(res);
        if (res.result==="ok") {
            const pagesInfo = res.data;
			// console.log(pagesInfo);
			let totalStatus = {};
			if (pagesInfo.totalStatus) totalStatus = pagesInfo.totalStatus;
            const columns = [
                {name:'serviceName',header:'Service Name', minWidth:100, sortable:true, 
                    renderer: { type: NameRenderer ,options: {
                        listData:res.list,labelKey:"serviceName",
                        onClickGridNameColumn:this.onClickGridNameColumn
                    } }
                }
                // ,{name:'version',header:'버전', width:20,align:"center"}
                ,{name:'serviceGroupName',header:'Service Group',width:120,sortable:true, align:"center"}
                // ,{name:'dagId',header:'DAG ID',width:200}
                ,{name:'dagId',header:'DAG ID', minWidth:200,sortable:true,
                    renderer: { type: DagIdRenderer,options: {listData:res.list} }
                }
                ,{name:'modelName',header:'Model Name', sortable:true,minWidth:100}
				,{name:'state',header:'Status', width:60,align:"center",sortable:true,
					renderer: { type: StatusRenderer ,options: { listData:res.list } }
				}
                ,{name:'runCycle',header:'Cycle',width:120,sortable:true,align:"center"}
                ,{name:'kill',header:'Kill',width:100,align:"center",
                    renderer: { type: LinkRenderer ,options: { listData:res.list,onClickKill:this.onClickKill } }
                }
            ];
            this.setState({gridData:res.list,pagesPage:pagesInfo.page,pagesTotalCount:pagesInfo.totalCount,pagesPerPage:pagesInfo.pageCount,columns:columns,totalStatus:totalStatus});
        } else if (res.result === "fail"){
            Msg.error(res.message);
            if (res.errCode == "401") {
                console.log(res.errCode);
                this.props.main.setState({login:false,role:'',username:'',sessionId:'',userInfo:{}});
            }
        }
    }

    /**
	 * 랜더러 클릭 이벤트 핸들러
	 * @param {Object} item 선택 Row 데이터
	 * @param {MouseEvent} e 클릭 이벤트
	 * @param {Object} props 랜더러 Options
	 */
    onClickGridNameColumn(item,e,props) {
        try {
            const {userInfo} = this.props.main.state;
            // console.log(item);
            // 관리자/등록자는 수정 팝업
            if (userInfo.userPermission === "ADMIN" || (item.userId === userInfo.userId)) {
                ServiceService.getServiceInfo( item.serviceId,(res) => {
                    this.props.main.hideLoading();
                    if (res.result === "ok") {
                        this.onClickModify(res.data.serviceInfo);
                        }
                        else if (res.result === "fail") {
                            Msg.error(res.message);
                        }
                },(e) => {console.log(e);this.props.main.hideLoading();} );
            } else {
                const popTitle = "Service Info.";
                this.props.main.showPopup(
                    popTitle,
                    <ServiceDetail title={popTitle} main={this.props.main} selectionItem={item} onClose={(e) => this.props.main.hidePopup(popTitle)} />,
                    {width:735, height:555},null,null
                );
            }
        } catch (err) {
            console.log(err);
        }
    }

    onClickReg() {
        const {modifyServiceInfo} = this.state;
        // this.setState({showReg:true});
        const popTitle = "Create Service";
        this.props.main.showPopup(
            popTitle,
            <ServiceReg title={popTitle} main={this.props.main} modifyFlag={modifyServiceInfo !== undefined} modifyServiceInfo={modifyServiceInfo} onClose={(e) => this.onCloseReg(popTitle)}/> ,
			{width:735, height:662, popupBtnAreaVisible:false},null,null
        );
    }

    onCloseReg(title) {
        this.requestData(this.state.pagesPage);
        // this.setState({modifyServiceInfo:undefined});
        this.props.main.hidePopup(title);
    }

    onClickModelPop() {
		// const {
        //     modifyModelInfo, modifyModelFiles
        // } = this.state;
        // this.setState({showReg:true});
        const popTitle = "Model Selection";
        this.props.main.showPopup(
            popTitle,
            <ModelPopCont title={popTitle} main={this.props.main} onClose={(e) => this.props.main.hidePopup(popTitle)} onClickSelection={this.onClickModelSelection}/> ,
            {width:700, height:542, okLabel:"선택", popupBtnAreaVisible:false},null,null
        );
    }

    onClickModelSelection(item) {
        // console.log(item);
        this.refs.modelName.value = item.modelName;
        this.refs.modelId.value = item.modelId;
    }

    onClickSchModelDel() {
        this.refs.modelName.value = "";
        this.refs.modelId.value = "";
    }

    /**
	 * 검색 클릭 핸들러
	 */
    onClickSch() {
        this.requestData(this.state.pagesPage, this.refs.schKey.value );
    }

    onClickModify(serviceInfo) {
        const popTitle = "Service Modify";
        this.props.main.showPopup(
            popTitle,
            <ServiceReg title={popTitle} main={this.props.main} modifyFlag={serviceInfo !== undefined} modifyServiceInfo={serviceInfo} onClose={(e) => this.onCloseReg(popTitle)}/> ,
            {width:735, height:719, popupBtnAreaVisible:false},null,null
        );
    }

    // onCloseReg(title) {
    //     this.requestData(this.state.pagesPage);
    //     this.setState({modifyModelInfo:undefined, modifyModelFiles:undefined});
    //     this.props.main.hidePopup(title);
    // }

    onClickKill(item) {
        // ServiceService.list(parm,this.onResultList,(err) => Msg.error(err.message));
        ServiceService.kill(item.serviceId,this.onResultKill,(err) => Msg.error(err.message));
    }

    onResultKill(res) {
        // console.log(res);
        Msg.ok(res);
    }

    render() {
        let {
            gridData, bodyHeight, columns, 
            pagesPage, pagesTotalCount, pagesPerPage,
            serviceGroupData,schInfo,totalStatus
        } = this.state;
		const {role} = this.props.main.state;
		if (totalStatus === undefined) totalStatus = {};
		// console.log( totalStatus );
		// for (let s in totalStatus) {
		// 	if (s !== "running") {
		// 		if (totalStatus.summUnscheduled === undefined) totalStatus.summUnscheduled = 0;
		// 		totalStatus.summUnscheduled += 1;
		// 	}
		// 	// running
		// 	// summStandby
		// 	// summUnscheduled
		// }
        if (schInfo === undefined) schInfo = {};
        // console.log(serviceGroupData);
        let serviceGroupOpts = [<option value="all">All</option>];
        for (let i=0; i<serviceGroupData.length; i++) {
            // if (selectedServiceGroupName === serviceGroupData[i].serviceGroupName)
                serviceGroupOpts.push(
                    <option value={serviceGroupData[i].serviceGroupName} selected={schInfo.serviceGroupName === serviceGroupData[i].serviceGroupName} key={Math.random()}>{serviceGroupData[i].serviceGroupName}</option>
                );
            // else
            //     serviceGroupOpts.push(
            //         <option value={serviceGroupData[i].serviceGroupName} key={Math.random()}>{serviceGroupData[i].serviceGroupName}</option>
            //     );
        }
        // 등록 버튼 스타일
        let schSty = {};
        if (role !== "ADMIN") {
            schSty.backgroundColor = "#a2a2a2";
            schSty.border="none";
            schSty.cursor="auto";
        }
        return <div className="page_layout">

        {/* <MainSubMenu /> */}
  
        <div className="layout_contents">
          <div className="content_list model_aid_list table_type1">
  
            <div className="content_title">
              <h3 className="tit">Service Management</h3>
            </div>
            <a href="http://61.97.187.199:8080/home" rel="noopener noreferrer" className="airflow_btn" target="_blank"></a>
            <div className="search_condition">
                <div className="ipt_group search_basis search_basis2"><div class="group_center">
					<ul>
						<li>
						<span className="tit">Service Group</span>
						<select ref="schServiceGroup" className="ml5" style={{float:"left",width: 100,height: 32,marginLeft: 10,outline:"none",border:"1px solid #CECECE"}}>
							{serviceGroupOpts}
						</select>
						</li>
						<li className="">
						<span className="tit float_left">Model</span> 
						<div className="ipt_searchpop">
							<input ref="modelName" type="text" className="ipt_text ml5" style={{width:201}} disabled/>
							<input ref="modelId" type="hidden" defaultValue={schInfo.modelId}/>
							<button className="btn btn_white" style={{width: 30,marginLeft: -6,border: "1px solid #CECECE",borderLeft: "none"}} onClick={() => this.onClickSchModelDel()}>X</button>
							<span className="btn btn_file" onClick={() => this.onClickModelPop()}></span>
						</div>                
						</li>
						<li>
						<span className="tit">Service Name / Dag ID</span> 
						<input ref="schKey" type="text" className="ipt_text ml5" style={{width:110}} defaultValue={schInfo.schKey} />
						</li>
					</ul>
					<a role="button" className="btn btn_black" onClick={() => this.onClickSch()}>검색</a>
                    </div>
              </div>
                <a role="button" className="btn btn_add btn_blue" style={schSty}
                    onClick={() => {role !== "ADMIN" ? console.log(role) : this.onClickReg()}} ></a>
            </div>

			<div className="status_guide">
				<ul>
					<li><span className="staus staus_running"></span> Running <b>{totalStatus.running === undefined ? 0 : totalStatus.running}</b></li>
					<li><span className="staus staus_standby"></span> Standby <b>{totalStatus.standby === undefined ? 0 : totalStatus.standby}</b></li>
					<li><span className="staus staus_unscheduled"></span> Unscheduled <b>{totalStatus.unscheduled === undefined ? 0 : totalStatus.unscheduled}</b></li>
					{/* <li style={{paddingLeft: 11}}><span>Total : {common.displNum(pagesTotalCount)}</span></li> */}
				</ul>
			</div>
            <Grid ref={'grid'}
                data={gridData} columnOptions={{resizable: true}}
                columns={columns}
                scrollX={false} scrollY={false}
                // bodyHeight={bodyHeight}
            />
            <div className="gridControlArea btn_area">
                {/* <button className="btn btn_black gridControlBtn" onClick={this.onClickDel}>삭제</button> */}
                {/* <div></div> */}
                <Pagination ref={'page'}
                                page={pagesPage}
                                totalCount={pagesTotalCount}
                                perPage={pagesPerPage}
                                onClickItem={this.onClickPageItem}/>
                {/* {role === "ADMIN" ? <button className="btn btn_black gridControlBtn" onClick={this.onClickReg}>등록</button> : null} */}
            </div>
    
          </div>
        </div>
      </div>;
    }
}

class DagIdRenderer {
    constructor(props) {
        // <div className="tui-grid-cell-content">model file ver test</div>
        const { listData } = props.columnInfo.renderer.options;
        const el = document.createElement('div');
        el.className = "tui-grid-cell-content";
        let item = undefined;
        if (listData && listData.length > 0)
        item = listData[props.rowKey];
        el.innerText = item["dagId"];
        el.title = item["serviceId"];

        // // el.className = "button basefont btn btn-info btn-sm";
        // const { listData, onClickGridNameColumn,labelKey } = props.columnInfo.renderer.options;
        // let item = undefined;
        // if (listData && listData.length > 0)
        // item = listData[props.rowKey];
        // if (item === undefined) item = {};
        // el.className="nameLink";
        // el.title=item[labelKey];
        // el.innerText = item[labelKey];
        // el.href="#";
        // el.addEventListener("click",(e) => onClickGridNameColumn(item,e,props));

        this.el = el;
    }
    getElement() {
        return this.el;
    }
}

class LinkRenderer {
    constructor(props) {
        const { onClickKill, listData } = props.columnInfo.renderer.options;
        let item = undefined;
        if (listData && listData.length > 0)
        item = listData[props.rowKey];
        if (item === undefined) item = {};
        // console.log( item.evaluationStatus );
		let el = document.createElement('a');
		el.role = "button";
		el.className = item.state === 'running' 
			? "table_btn btn_lineorange btn_resource" 
			: "table_btn btn_disable btn_resource";
		el.innerText = "KILL";
        el.title="KILL";
        if (item.state === 'running')
            el.addEventListener("click",(e) => onClickKill(item,e,props));
        this.el = el;
    }
    getElement() {
        return this.el;
    }
}

class StatusRenderer {
    constructor(props) {
        const { onClickTestReq, listData } = props.columnInfo.renderer.options;
        let item = undefined;
        if (listData && listData.length > 0)
        item = listData[props.rowKey];
        if (item === undefined) item = {};
		let el = document.createElement('span');
		if (item.state === "running") {
			el.className = "staus staus_running";
		} else {
			if (item.runCycle === "None" || item.runCycle === "" || item.runCycle === undefined  || item.runCycle === null
				|| item.state === undefined  || item.state === null) {
				if ((item.runCycle !== null && item.runCycle.indexOf("@") > -1) || (item.runCycle !== null && item.runCycle.split(" ").length === 5))
					el.className = "staus staus_standby";
				else
					el.className = "staus staus_unscheduled";
			} else {
				el.className = "staus staus_standby";
			}
		}
        this.el = el;
    }
    getElement() {
        return this.el;
    }
}

export default ServiceManager;