package skt.eiweb.model;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;
import skt.eiweb.authority.AuthorityService;
import skt.eiweb.authority.model.User;
import skt.eiweb.base.EIProperties;
import skt.eiweb.base.model.EIResponse;
import skt.eiweb.file.FileService;
import skt.eiweb.file.model.FileDto;
import skt.eiweb.manager.ManagerService;
import skt.eiweb.model.model.Model;
import skt.eiweb.model.model.ModelDto;

/**
 * ================================================================================
 * @Project      : eiweb
 * @Package      : skt.eiweb.model
 * @Filename     : ModelController.java
 * 
 * All rights reserved. No part of this work may be reproduced, stored in a
 * retrieval system, or transmitted by any means without prior written
 * permission of SKT corp.
 * 
 * Copyright(c) 2020 SKT corp. All rights reserved
 * =================================================================================
 *  No     DATE              Description
 * =================================================================================
 *  1.0	   2020. 9. 29.      Initial Coding & Update
 * =================================================================================
 */
@Slf4j
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/model")
@SuppressWarnings({
	"rawtypes", "unchecked", "unused"
})
public class ModelController {

	@Autowired
	ModelService modelService;

	@Autowired
	AuthorityService authorityService;

	@Autowired
	FileService fileService;

	@Autowired
	EIProperties props;

	@Autowired
	ManagerService managerService;

	/**
	 * 모델 리스트 조회
	 */
	@PostMapping("/list")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse getList(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		Model model = new Model();
		model.setModelId(parm.get("modelId"));

		if ("all".equals(parm.get("page"))) {
			model.setPage(1);
			model.setPageCount(9999999);
		} else {
			if (parm.get("page") != null) {
				model.setPage(Integer.parseInt(parm.get("page")));
			}
			if (parm.get("pageCount") != null) {
				model.setPageCount(Integer.parseInt(parm.get("pageCount")));
			}
		}
		if (parm.get("schKey") != null && parm.get("schType") != null) {
			model.setSchType(parm.get("schType"));
			model.setSchKey(parm.get("schKey"));
		}

		List<ModelDto> list;
		HashMap data;
		try {
			list = modelService.getList(model);
			data = new HashMap();
			data.put("totalCount", modelService.getTotalCount(model));
			data.put("page", model.getPage());
			data.put("pageCount", model.getPageCount());
			res.setResult(EIResponse.SUCCESS);
			res.setList(list);
			res.setData(data);
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 등록
	 */
	@PostMapping("/regist")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse regist(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		Model model = new Model();
		model.setModelName(parm.get("modelName"));
		model.setPriority(Integer.parseInt(parm.get("priority")));
		model.setBaseImage(parm.get("baseImage"));

		if (parm.get("limitRuntime") == null || "".equals(parm.get("limitRuntime"))) {
			parm.put("limitRuntime", "0");
		}
		model.setLimitRuntime(Integer.parseInt(parm.get("limitRuntime")));
		model.setEvaluationStatus("init");
		if (parm.get("modelDesc") != null && !"".equals(parm.get("modelDesc"))) {
			model.setModelDesc(parm.get("modelDesc"));
		}
		String files = parm.get("modelFiles");
		String[] fileCodes = {};
		if (files != null) {
			fileCodes = files.split(",");
		}

		try {
			String newModelId = null;
			boolean modify = false;
			if (parm.get("modelId") != null) {
				newModelId = parm.get("modelId");
				modify = true;
			} else {
				newModelId = modelService.makeNextModelId();
			}
			model.setModelId(newModelId);

			// 모델명 중복 체크
			int ret = modelService.chkModelName(model);
			if (ret > 0) {
				res.setResult(EIResponse.FAIL);
				res.setMessage("동일한 모델명이 존재합니다.");
				return res;
			}

			// 사용자 정보 가져오기
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			User usr = new User();
			usr.setPassword(auth.getCredentials().toString());
			usr = authorityService.getUserInfoByPw(usr);
			if (parm.get("developing") != null && "true".equals(parm.get("developing"))) {
				model.setUserId("admin"); // 로컬 개발중 세션이 없기때문에 ..
			} else {
				model.setUserId(usr.getUserId());
			}

			ret = modify ? modelService.updateModel(model) : modelService.registModel(model);
			if (ret > 0) {
				if (modify) {
					FileDto dto = new FileDto();
					dto.setModelId(newModelId);
					dto.setFileCodes(fileCodes);
					// 이전 버전 파일 복사
					fileService.updateVersionFiles(dto);
					String[] newfileCodes = fileService.newFileCodes(dto);
					// 업로드 파일 모델용으로 매핑
					fileService.modelUploaded(newModelId, newfileCodes);
					// 히스토리 추가
					modelService.createHistory(newModelId);
				} else {
					// 업로드 파일 모델용으로 매핑
					fileService.modelUploaded(newModelId, fileCodes);
					// 히스토리 추가
					modelService.createHistory(newModelId);
				}
				res.setResult(EIResponse.SUCCESS);
			} else {
				res.setResult(EIResponse.FAIL);
				res.setMessage("모델 등록 실패");
			}
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델명 중복체크
	 */
	@PostMapping("/chkModelName")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse chkModelName(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		Model model = new Model();
		model.setModelName(parm.get("modelName"));

		if (parm.get("modelName") == null || model.getModelName().length() < 1) {
			res.setResult(EIResponse.FAIL);
			res.setMessage("모델명을 입력해주세요.");
			return res;
		}

		try {
			int ret = modelService.chkModelName(model);
			if (ret > 0) {
				res.setResult(EIResponse.FAIL);
				res.setMessage("동일한 모델명이 존재합니다.");
			} else {
				res.setResult(EIResponse.SUCCESS);
				res.setMessage("사용 가능합니다.");
			}
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 삭제
	 */
	@PostMapping("/delete")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse delete(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		int chk = 0;

		try {
			String pModelIds = parm.get("modelIds");
			String[] modelIds = pModelIds.split(",");
			for (int i = 0; i < modelIds.length; i++) {
				if (modelService.isUseService(modelIds[i])) {
					res.setResult(EIResponse.FAIL);
					res.setMessage("모델을 사용하는 Service가 존재합니다.");
				} else {
					chk += modelService.deleteModel(modelIds[i]);
					try {
						fileService.deleteByModelId(modelIds[i]);
					} catch (Exception e) {
						System.out.println(e.getMessage());
					}
				}
			}
			if (chk > 0) {
				res.setResult(EIResponse.SUCCESS);
				res.setMessage("모델 삭제 성공");
			} else {
				res.setResult(EIResponse.FAIL);
				res.setMessage("모델 파일 삭제 실패");
			}
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 상세 조회
	 */
	@PostMapping("/modelInfo")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse modelInfo(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		String modelId = parm.get("modelId");

		try {
			ModelDto model = modelService.getModelInfo(modelId);
			HashMap m = new HashMap();
			m.put("modelInfo", model);
			res.setData(m);
			res.setList(fileService.getFileListByModelId(modelId, model.getVersion()));
			res.setResult(EIResponse.SUCCESS);
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 이력 조회
	 */
	@PostMapping("/modelHistInfo")
	@Secured({
		"ROLE_MODELER", "ROLE_ADMIN"
	})
	public EIResponse modelHistInfo(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		String modelId = parm.get("modelId");
		String version = parm.get("modelVersion");

		try {
			ModelDto model = modelService.getModelHistInfo(modelId, version);
			HashMap m = new HashMap();
			m.put("modelInfo", model);
			res.setData(m);
			res.setList(fileService.getFileListByModelId(modelId, model.getVersion()));
			res.setResult(EIResponse.SUCCESS);
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 생성 이력 조회
	 */
	@PostMapping("/regHistory")
	@Secured({
		"ROLE_ADMIN"
	})
	public EIResponse history(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		Model model = new Model();
		model.setModelId(parm.get("modelId"));

		if (parm.get("page") != null) {
			model.setPage(Integer.parseInt(parm.get("page")));
		}
		if (parm.get("schKey") != null && !"".equals(parm.get("schKey"))) {
			model.setSchKey(parm.get("schKey"));
		}
		if (parm.get("startDate") != null) {
			model.setStartDate(parm.get("startDate"));
		}
		if (parm.get("endDate") != null) {
			model.setEndDate(parm.get("endDate"));
		}
		if (parm.get("action") != null) {
			model.setAction(parm.get("action"));
		}

		List<ModelDto> list;
		HashMap data;
		try {
			list = modelService.getRegHistory(model);
			data = new HashMap();
			data.put("totalCount", modelService.getRegHistTotalCount(model));
			data.put("page", model.getPage());
			data.put("pageCount", model.getPageCount());
			res.setResult(EIResponse.SUCCESS);
			res.setList(list);
			res.setData(data);
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 평가 요청 (연동)
	 */
	@PostMapping("/modelTestReq")
	@Secured({
		"ROLE_ADMIN", "ROLE_MODELER"
	})
	public EIResponse modelTestReq(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();
		String modelId = parm.get("modelId");

		try {
			ModelDto model = modelService.getModelInfo(modelId);
			List<FileDto> list = fileService.getFileListByModelId(model.getModelId(), model.getVersion());
			FileDto file = null;
			for (int i = 0; i < list.size(); i++) {
				file = list.get(i);
			}
			String modelFilePath = props.getUploadpath() + "/" + model.getModelId() + "/" + file.getFileCode();
			// TEST
			// String modelFilePath = "/mnt/nas/models" + "/" + model.getModelId() + "/" + file.getFileCode();
			HashMap<String, String> mngParm = new HashMap<String, String>();
			mngParm.put("model_id", modelId);
			mngParm.put("model_version", model.getVersion());
			mngParm.put("model_file", modelFilePath);
			String mngRes = managerService.modelTestReq(mngParm);
			res.setResult(EIResponse.SUCCESS);
			res.setValue(mngRes);
			res.setMessage("요청 완료 했습니다.");
		} catch (Exception e) {
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

	/**
	 * 모델 소스 보기(연동)
	 */
	@PostMapping("/modelSourceView")
	@Secured({
		"ROLE_ADMIN", "ROLE_MODELER"
	})
	public EIResponse modelSourceView(@RequestParam HashMap<String, String> parm, HttpServletRequest request) throws Exception {
		EIResponse res = new EIResponse();

		try{
			System.out.println("@@@@@@@@@@@@@@@ MODEL ID : [" + parm.get("modelId") + "]");
			String contents = modelService.getSourceFileContents(parm.get("modelId"));

			res.setResult(EIResponse.SUCCESS);
			res.setValue(contents);
			res.setMessage("요청 완료 했습니다.");
		} catch (Exception e) {
			e.printStackTrace();
			res.setResult(EIResponse.FAIL);
			res.setMessage(e.getMessage());
		}

		return res;
	}

}
