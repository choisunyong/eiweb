package skt.eiweb.file;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

import skt.eiweb.authority.AuthorityService;
import skt.eiweb.authority.model.User;
import skt.eiweb.base.EIProperties;
import skt.eiweb.file.mapper.FileMapper;
import skt.eiweb.file.model.File;
import skt.eiweb.file.model.FileDto;
import skt.eiweb.utils.FileUtil;

/**
 * ================================================================================
 * @Project      : eiweb
 * @Package      : skt.eiweb.file
 * @Filename     : FileServiceImpl.java
 * 
 * All rights reserved. No part of this work may be reproduced, stored in a
 * retrieval system, or transmitted by any means without prior written
 * permission of SKT corp.
 * 
 * Copyright(c) 2020 SKT corp. All rights reserved
 * =================================================================================
 *  No     DATE              Description
 * =================================================================================
 *  1.0	   2020. 9. 29.      Initial Coding & Update
 * =================================================================================
 */
@Service
public class FileServiceImpl implements FileService {

	@Autowired
	private AuthorityService service;

	@Autowired
	private FileMapper mapper;

	@Autowired
	private EIProperties props;

	private Path root = null;

	@Override
	public void init() {
		boolean isSuccess = FileUtil.makeDirectory(root);
		if (!isSuccess) {
			throw new RuntimeException("could not initialize upload directory!!");
		}
	}

	@Override
	public void init(String path) {
		root = Paths.get(path);
		this.init();
	}

	/**
	 * 파일 저장
	 */
	@Override
	public File getFileInfo(MultipartFile file) {
		File fileVo = new File();

		try{
			// 파일 정보 확인
			String ext = "";
			String fileName = file.getOriginalFilename();
			if (props.getMaxFileNameLen() < fileName.length()) {
				throw new RuntimeException("파일명 길이가 깁니다. (길이 제한 : " + props.getMaxFileNameLen() + ")");
			}
			if (fileName.indexOf(".") > -1) {
				ext = fileName.substring(fileName.lastIndexOf(".")+1, fileName.length());
			}

			if (!chkUploadExt(ext)) {
				throw new RuntimeException("업로드 가능하지 않는 확장자 입니다. : " + ext);
			}
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			User usr = new User();
			usr.setPassword(auth.getCredentials().toString());
			usr = service.getUserInfoByPw(usr);

			fileVo.setFileCode(fileName);
			fileVo.setFileName(fileName);
			fileVo.setFileExt(ext);
			fileVo.setFileSize(Long.toString(file.getSize()));
			fileVo.setUserId(usr.getUserId());
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}

		return fileVo;
	}

	private boolean chkUploadExt(String ext) {
		boolean ret = false;
		String[] exts = props.getUploadextensions().split(",");

		for (int i = 0; i < exts.length; i++) {
			if (exts[i].toLowerCase().equals(ext.toLowerCase()))
				ret = true;
		}

		return ret;
	}


	@Override
	public void deleteAll() {
		FileSystemUtils.deleteRecursively(root.toFile());
	}

	@Override
	public void deleteAll(String path) {
		root = Paths.get(path);
		this.deleteAll();
	}

	@Override
	public Stream<Path> loadAll() {
		try {
			return Files.walk(this.root, 1).filter(path -> !path.equals(this.root)).map(this.root::relativize);
		} catch (IOException e) {
			throw new RuntimeException("Could not load the files!");
		}
	}

	/**
	 * 해당 모델의 파일리스트(버전 지정)
	 */
	@Override
	public List<FileDto> getFileListByModelId(String modelId, String version) throws Exception {
		FileDto fileVo = new FileDto();
		fileVo.setModelId(modelId);
		// fileVo.setVersion(version);

		return mapper.selectFile(fileVo);
	}



	/**
	 * 모델 파일 저장
	 */
	public File modelFileSave(MultipartFile file) {
		File fileVo = new File();

		try {
			String saveFileName = file.getOriginalFilename();
			String ext = "";
			if (file.getOriginalFilename().indexOf(".") > -1) {
				ext = saveFileName.substring(saveFileName.lastIndexOf(".") + 1, saveFileName.length());
			}
			saveFileName = saveFileName.replaceAll("." + ext, "");
			Files.copy(file.getInputStream(), this.root.resolve(saveFileName));
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}

		return fileVo;
	}

}
